snippet snip
alias s
    snippet ${0:name}
    alias ${1:altname}
        ${2:snippet}

snippet manacher
        vector<int> manacher(string & s){
        vector<int> v(s.size());
        int n = int(s.size());
        int i = 0, j = 0, k = 1;
        while( i < n ){
            while( i-j >= 0 && i+j < n && s[i-j] == s[i+j] ) ++j;
            v[i] = j;
            k = 1;
            while( i-k >= 0 && k+v[i-k] < j ) v[i+k] = v[i-k], ++k;
            i += k, j -= k;
        }
        return std::move(v);
    }

snippet fenwick
    struct Fenwick { // one-based binary indexed tree
        vector<int> bit;
        int n;

        Fenwick(int n) {
            this->n = n + 1;
            bit.assign(n + 1, 0);
        }

        Fenwick(vector<int> a) : Fenwick(a.size()) {
            for (size_t i = 0; i < a.size(); i++)
                add(i, a[i]);
        }

        int sum(int idx) {
            // inclusive [0, idx]
            int ret = 0;
            for (++idx; idx > 0; idx -= idx & -idx)
                ret += bit[idx];
            return ret;
        }

        int sum(int l, int r) {
            // inclusive [l, r]
            return sum(r) - sum(l - 1);
        }

        void add(int idx, int delta) {
            for (++idx; idx < n; idx += idx & -idx)
                bit[idx] += delta;
        }
    };

snippet unionfind
    struct UF {
        vector<int> e;
        UF(int n) : e(n, -1) {}
        bool same_set(int a, int b) { return find(a) == find(b); }
        int size(int x) { return -e[find(x)]; }
        int find(int x) { return e[x] < 0 ? x : e[x] = find(e[x]); }
        void join(int a, int b) {
            a = find(a), b = find(b);
            if (a == b) return;
            if (e[a] > e[b]) swap(a, b);
            e[a] += e[b]; e[b] = a;
        }
    };

snippet getunique
    sort(${0:v}.begin(), ${0:v}.end());
    ${0:v}.resize(std::distance(${0:v}.begin(), unique(${0:v}.begin(), ${0:v}.end())));
